깃에 대해 배운 것을 적는 파일입니다.

헷갈리는 용어
디렉토리 = 경로에 폴더
파일 = 경로가 없는 것

현재 디렉토리 확인
pwd

디렉토리 이동
cd 경로/
cd /d/File/git/
cd.  =  현재 디렉토리
cd..  =  부모 디레토리러 이동

mkdir [디렉토리명] = 디렉토리 이동 후 파일 만들기
rm [파일명] = 파일 삭제
rm -r [디렉토리명] =  디렉토리와 그 하위 파일 삭제

ls 	= 디렉토리에 정보 확인
ls -al	= 뒤에 추가로 -al를 쓰면 상세히(권한) 을 확인

현재 버전 관리할 디렉토리로 이동한 뒤
이 디레토리를 버전관리 할 것이다 라는 명령어
git init

사용 후 ls -al 를 하여 .git이 있으면 버전관리가 가능한 상태

이 .git 폴더가 버전에 관한 정보를 저장하는 로그파일이므로 지우면 현재 파일을 제외한 과거 로그가 다 사라짐


파일을 작성하는 에디터 명령어(현재 이 파일과 같은)
파일이 없으면 생성하고 있다면 수정함
vim [파일명].[확장자]

현재 이 파일은 guide_git.txt 파일임

vim에서 입력을 하려면 i키 누르면 INSERT 모드로 전환됨

esc키 누르면 INSERT 모드를 빠져 나옴 
콜론(Shitf+;) 키를 누르고 wq를 입력 후 Enter
w = 작성한 내용 저장
q = 이 프로그램을 종료합니다.

cat [파일명] = 파일에 내용을 확인

git status = 현재 디렉토리에 파일 상태 확인
현재 디렉토리에 파일이 버전관리가 되고 있는지를 확인함
빨간색의 파일명은 현재 버전관리가 되고 있지 않음을 의미

그래서 그 파일을 버전관리할려면
add [파일명] 

다시 git status 하면 파일이 등록됨
이렇게 파일을 일일히 지정해줘야 하는 이유는 임시파일 같은 파일까지 관리하지 않게 하기 위해서임
조금 불편하지만 그만큼 정확하게 관리할 수 있음


버전관리란?
변화 =  이전과 조금이라도 달라진 상태
버전 =  의미가 있는 변화를 의미함
어떠한 기능을 만들려고 하는데 그 과정에서 저장하는 것이 변화
그 기능을 다 만들어서 저장한 것이 버전이라고 생각함

이 버전관리를 자신 했다는 이름을 저장하는 명령어
git config --global user.name [저장할 이름]
git config --global user.email [저장할 이메일]

git commit = 이 버전을 
실행하면 vim이 실행되고 # 내용은 주석 같은 것이고
맨 위에 입력할 수있고 이것을 커밋메세지, 버전메세지라고 함
이 입력한 내용은 이 버전이 어떤 변화가 있었는지 왜 변경되었는지 적을 수 있음

vim이므로 커밋메세지(주로 버전 1.0 과 내용)을 쓰고 esc :wq 입력
상태 메세지가 뜸. 의미는 이러한 내용으로 버전이 되었다 라는 의미

git log = 깃의 현재까지의 변화를 확인함

파일이 수정되었을 때도 다시 git add [파일명]으로 등록한 뒤 git commit을 해야 함
파일을 수정한 뒤 git status를 입력하면 빨간글씨로 modified: [파일명]이 되는데 이것이 수정되었다는 뜻임

git add 응용법
git add를 통해 수정한 파일들을 업로드할 때 선택한 파일만 add하여 commit을 쓸 수도 있음
정리하면 여러가지 기능을 만들고 그 중 필요한 것만 선택하여 commit(업데이트)를 히여 버전을 만들 수 있다는 뜻


stage = commit 할려고 대기하는 파일들의 영역
repository = commit이 되어 저장된 영역


git log 에 관하여
git log -p = commit(버전)과 commit(버전) 사이의 변경점을 보여줌
	--- [파일명] = 이전 버전의 원래 내용
	+++ [파일명] = 이후 버전의 변경된 내용
	-빨강색은 원래 내용
	+초록새은 변경된 내용

commit ID란
	git log 시 노랑색으로 나오는 commit [숫자영어] = commit ID로써 매우 중요한 정보임
	commit ID는 그 버전의 고유한 주소로써 이전 버전으로 가고 싶거나 할 떄 씀

	git diff [commit ID]..[commit ID] = 앞에 적은 버전과  뒤쪽에 적은 버전의 차이점을 보여줌

git diff = 가장 최근에 저장한 add에서 지금 수정된 작업들을 확인하여 commit 전 다시한번 확인할 수 있는 중요한 명령어



